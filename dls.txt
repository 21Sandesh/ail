// uninformed/dls.cpp

#include <iostream>
#include <vector>
#include <list>

using namespace std;

void dlsRecursive(const vector<vector<int>> &adj_list, int start, int depth, vector<bool> &visited, vector<int> &order)
{
    visited[start] = true;
    order.push_back(start);

    if (depth == 0)
    {
        return;
    }

    for (int neighbor : adj_list[start])
    {
        if (!visited[neighbor])
        {
            dlsRecursive(adj_list, neighbor, depth - 1, visited, order);
        }
    }
}

vector<int> dls(const vector<vector<int>> &adj_list, int start, int depth)
{
    int numVertices = adj_list.size();
    vector<bool> visited(numVertices, false);
    vector<int> order;

    dlsRecursive(adj_list, start, depth, visited, order);
    return order;
}

int DepthLimitedSearch()
{
    int vertices, depth;
    cout << "Enter the number of vertices: ";
    cin >> vertices;

    vector<vector<int>> adj_list;

    adj_list = GraphInput(vertices);

    cout << "Enter Node to Start From: ";
    cin >> vertices;

    cout << "Enter Depth Limit: ";
    cin >> depth;

    vector<int> order = dls(adj_list, vertices, depth);

    cout << "DLS traversal order: ";
    for (int i : order)
    {
        cout << i << " ";
    }
    cout << endl;

    return 0;
}

/*

4
2
1
2
1
2
1
0
1
3
2
1

*/