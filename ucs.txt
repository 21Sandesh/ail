// uninformed/ucs.cpp

#include <iostream>
#include <vector>
#include <queue>
#include <limits>
#include <algorithm>

using namespace std;

struct Node
{
    int id;
    int cost;
    Node(int _id, int _cost) : id(_id), cost(_cost) {}
    bool operator>(const Node &other) const
    {
        return cost > other.cost;
    }
};

vector<int> uniformCostSearch(const vector<vector<pair<int, int>>> &adj_list, int start, int goal)
{
    vector<int> parent(adj_list.size(), -1);
    vector<int> cost(adj_list.size(), numeric_limits<int>::max());
    priority_queue<Node, vector<Node>, greater<Node>> pq;

    cost[start] = 0;
    pq.push(Node(start, 0));

    while (!pq.empty())
    {
        Node current = pq.top();
        pq.pop();

        int u = current.id;
        int current_cost = current.cost;

        if (u == goal)
        {
            break;
        }

        if (current_cost > cost[u])
        {
            continue; // This node has been reached before with a cheaper cost
        }

        for (auto &neighbor : adj_list[u])
        {
            int v = neighbor.first;
            int edge_cost = neighbor.second;

            if (cost[u] + edge_cost < cost[v])
            {
                cost[v] = cost[u] + edge_cost;
                parent[v] = u;
                pq.push(Node(v, cost[v]));
            }
        }
    }

    // Reconstruct path from start to goal
    vector<int> path;
    for (int v = goal; v != -1; v = parent[v])
    {
        path.push_back(v);
    }
    reverse(path.begin(), path.end());

    return path;
}

int UniformCostSearch()
{
    int vertices, edges;
    cout << "Enter the number of vertices: ";
    cin >> vertices;
    cout << "Enter the number of edges: ";
    cin >> edges;

    vector<vector<pair<int, int>>> adj_list(vertices);

    cout << "Enter edges in the format (from to cost):" << endl;
    for (int i = 0; i < edges; ++i)
    {
        int from, to, cost;
        cin >> from >> to >> cost;
        adj_list[from].push_back(make_pair(to, cost));
    }

    int start, goal;
    cout << "Enter start node: ";
    cin >> start;
    cout << "Enter goal node: ";
    cin >> goal;

    vector<int> path = uniformCostSearch(adj_list, start, goal);

    if (!path.empty())
    {
        cout << "Path found: ";
        for (int node : path)
        {
            cout << node << " ";
        }
        cout << endl;
    }
    else
    {
        cout << "No path found from " << start << " to " << goal << endl;
    }

    return 0;
}

/*
Sample Input
7
12
0 1 2
0 3 5
1 6 1
3 1 5
3 6 6
3 4 2
2 1 4
4 2 4
4 5 3
5 2 6
5 6 3
6 4 7
0
6

*/